Λεξικό Όρων
##########################

.. glossary::
   :sorted:

   csv data : C
      Comma-Separated-Values. Ένα αρχείο με *τιμές-διαχωρισμένες-με-κόμμα* είναι ένα αρχείο απλού κειμένου (plain text), οριοθετημένου με κόμμα. Κάθε γραμμή κειμένου είναι μία *εγγραφή δεδομένων* (data record), που αποτελείται από ένα ή περισσότερα πεδία, διαχωρισμένα με κόμμα. Το κόμμα σε αυτή την περίπτωση είναι οριοθέτης των τιμών (δες :term:`Delimeter`). 

      Το όνομα csv και η μορφή αρχείων (".csv"), προήλθαν από αυτή ακριβώς την ιδιαιτερότητά τους.

      Τέτοιας μορφής αρχεία περιέχουν κατά βάση δεδομένα σε πινακοειδή μορφή (tabular data με αριθμούς και κείμενο), όπου κάθε γραμμή περιλαμβάνει τον ίδιο αριθμό πεδίων. Χρησιμοποιούνται σαν περιέκτες (containers) για ακατέργαστα ή αρχικά δεδομένα μίας διεργασίας (raw ή pimary data), που θα χρησιμοποηθούν στη συνέχεια από κάποιο σ΄συστημα επεξεργασίας δεδομένων.

      Για παράδειγμα, ένα τέτοιο αρχείο μπορεί να έχει τη μορφή::

            fname , lname        , age
            Νίκος , Παπαδόπουλος , 28
            Μαρία , Χριστοδουλάκη, 33
            Ειρήνη, Κωστοπούλου  , 45

      Δηλαδή να περιέχει δεδομένα ατόμων όπως όνομα, επίθετο και ηλικία. Μπορείτε να βρείτε περισσότερες πληροφορίες για τα csv data στο άρθρο της Wikipedia, :wiki:`Comma-separated values`

   Delimeter
      (ελλ. "Οριοθέτης", δες Wikipedia: :wiki:`Delimiter`)
        
      Οι οριοθέτες είναι σειρές συμβόλων (είτε ένα είτε περισσότερα), τα οποία καθορίζουν τα όρια μεταξύ ξεχωριστών και ανεξάρτητων περιοχών είτε απλού κειμένου είτε μίας ροής δεδομένων.
        
      Αν θέλετε μία εύκολη αναλογία από την καθημερινότητά μας, σκεφτείτε τα σύμβολα κόμμα, τελεία, απόστροφο κ.λπ. (δηλαδή τα *σημεία στίξης*) ή τα ζεύγη παρενθέσεων, αγκίστρων κ.λπ. Όλα αυτά τα σύμβολα, στην απλή καθημερινή γραφή και με βάση τους γνωστούς κανόνες γραμματικής, παίζουν ακριβώς αυτό το ρόλο του οριοθέτη μέσα στο κείμενο. Οι τελείες για να διαχωρίζουν προτάσεις, τα κόμματα για να διαχωρίζουν κομμάτια κειμένου μέσα σε μία πρόταση, οι παρενθέσεις για να ομαδοποιούν κείμενο κ.ο.κ.

      Με ανάλογο τρόπο και στον κόσμο της πληροφορικής, όταν γράφουμε ένα κείμενο (είτε απλό είτε κώδικα) αυτό που πρακτικά κάνουμε είναι να εισάγουμε σειρές συμβόλων (strings). Το σύστημα που θα κληθεί να επεξεργαστεί αυτό που γράψαμε, δε γνωρίζει τη γραμματική μίας φυσικής γλώσσας, απλά αντιλαμβάνεται όλους τους χαρακτήρες σαν σύμβολα (είτε είναι ένα γράμμα είτε ένα κόμμα είτε ένα ερωτηματικό κ.λπ.). Επειδή όμως η ανάγκη να κωδικοποιείται ένα κείμενο, υφίσταται και στον κόσμο της πληροφορικής, καθιερώθηκαν κανόνες γραμματικής και για τις γλώσσες προγραμματισμού αλλά και τα πληροφοριακά συστήματα γενικά (όπως τα λειτουργικά συστήματα). Μεταξύ αυτών των κανόνων είναι και ο τρόπος χρήσης συμβόλων, πέρα από την αυτονόητη έννοιά τους. Δηλαδή σε μία γλώσσα προγραμματισμού μπορούμε να χρησιμοποοιήσουμε το κόμμα κατά την κοινή του χρήση (όπως σε μία φυσική γλώσσα) αλλά και με διαφορετικό τρόπο, αν ισχύουν κάποιοι κανόνες.

      Παράδειγμα είναι ο χαρακτήρας ``*`` που στις περισσότερες markup γλώσσες έχει το ρόλο οριοθέτη διαμόρφωσης κειμένου, ότι κείμενο βρίσκεται μεταξύ δύο ``*``, μορφοποιείται σαν italics, ότι κείμενο βρίσκεται μεταξύ ζευγών ``**``, μορφοποιείται σαν bold κ.λπ.

      Υπάρχει μερική μόνο τυποποίηση στο είδος των οριοθετών και τον τρόπο χρήσης τους, μεταξύ των γλωσσών προγγραμματισμού και πληροφοριακών συστημάτων. Η τεκμηρίωση του κάθε συστήματος διευκρνίζει επακριβώς τους ισχύοντες οριοθέτες.



   Escape Character
      (ελλ. "Χαρακτήρας Διαφυγής", δες Wikipedia: :wiki:`Escape character <Escape_character>` και :wiki:`Metacharacter`)
        
      Στην πληροφορική γενικά, ένας *χαρακτήρας διαφυγής* είναι ένας χαρακτήρας (συνήθως υπάρχει στο πληκτρολόγιό μας) που υποχρεώνει κάποιο σύστημα επεξεργασίας, να διαχειριστεί με τρόπο διαφορετικό από το συνηθισμένο, τους χαρακτήρες που τον ακολουθούν.

      Σε όλες τις γλώσσες προγραμματισμού αλλά και τα λειτουργικά συστήματα και περιβάλλοντα ανάπτυξης εφαρμογών (αυτά είναι μερικά συστήματα επεξεργασίας), κάποιοι ή όλοι από τους μη αλφαριθμητικούς χαρακτήρες (δηλαδή τα σύμβολα) έχουν ειδική σημασία, πέρα από το τι συμβολίζουν. Οι χαρακτήρες αυτοί είναι δηλαδή *ειδικοί χαρακτήρες* (special characters [#]_). Τέτοιοι χαρακτήρες είναι για παράδειγμα τα σύμβολα ``!, @, #, $, %, ^, &, *, \, /`` κ.λπ. Δεν είναι υποχρεωτικό ότι όλα τα σύμβολα έχουν ειδική σημασία για όλα τα συστήματα. Το ποιοί ακριβώς είναι οι special characters και τι είδους σημασία έχουν, καθορίζεται ρητά στην τεκμηρίωση του αντίστοιχου συστήματος.

      Για παράδειγμα, ο χαρακτήρας ``#`` (hash ή number sign) στη γλώσσα Python σημαίνει ότι οτιδήποτε τον ακολουθεί, μέχρι το τέλος της τρέχουσας γραμμής κειμένου, είναι ένα σχόλιο (comment). Στη γλώσσα LaTeX ο αντίστοιχος χαρακτήρας είναι ο ``%``. Τα σχόλια δε λαμβάνονται υπόψη κατά την επεξεργασία κώδικα, χρησιμοποιούνται κυρίως σαν σημειώσεις του προγραμματιστή, για να τεκμηριώνει τον κώδικά του.

      Τι γίνεται όμως όταν πρέπει να χρησιμοποιήσουμε τέτοιους χαρακτήρες στο κείμενό μας, πέρα από την ειδική χρήση τους (να εμφανιστούν δηλαδή όπως ακριβώς είναι). Για να γίνει αυτό πρέπει πρώτα ο χαρακτήρας να "αποδεσμευτεί" (escaped) δηλαδή να πάψει προσωρινά να έχει ειδική σημασία. Όλες οι γλώσσες προγραμματισμού και τα συστήματα επεξεργασίας γενικά, που χρησιμοποιούν ειδικούς χαρακτήρες, προσφέρουν αυτή τη δυνατότητα μέσω άλλων χαρακτήρων που προστίθενται ακριβώς πριν από το χαρακτήρα που μας ενδιαφέρει. Αυτοί είνα οι *χαρακτήρες διαφυγής* οι οποίοι επίσης καθορίζονται ρητά, στην τεκμηρίωση του αντίστοιχου συστήματος. Στα παραπάνω δύο παραδείγματα, μπορεί να χρησιμοποιηθεί ο χαρακτήρας ``\`` (backslash) σαν χαρακτήρας διαφυγής, δηλαδή μπορούμε να γράψουμε στο κείμενό μας ``\#`` και ``\%``, για Python και LaTeX αντίστοιχα, για να πάρουμε αυτούσιους τους χαρακτήρες ``#`` και ``%``.

      Θα πρέπει να δίνεται ιδιαίτερη σημασία τόσο στην έννοια που αποδίδεται σε κάθε χαρακτήρα, στο πλαίσιο του επεξεργαστικού συστήματος που χρησιμοποιούμε καθώς και στη χρήση των αντίστοιχων χαρακτήρων διαφυγής, ώστε να μην προκύπτουν λάθη κατά την επεξεργασία κώδικα.






   Markup Language
      (ελλ. *Γλώσσα Σήμανσης*)

      Μία :wiki:`markup language <Markup language>` είναι ένα σύστημα με το οποίο, εισάγουμε 'σχόλια' ή 'σημάνσεις' (mark up) στο κείμενο ενός εγγράφου, με ειδικό διακριτό τρόπο. Η ιδέα και η ορολογία είναι ακριβώς ανάλογες με τη 'σήμανση' που κάνουμε στα χειρόγραφα κείμενα σε χαρτί, όταν υπογραμμίζουμε ή εισάγουμε διάφορα σχέδια με κόκκινο ή μπλε μολύβι. Στα ψηφιακά μέσα, αυτό το 'κείμενο με κόκκινο ή μπλε μολύβι', αντικαταστάθηκε με ετικέτες (tags) οι οποίες περιέχουν πληροφορίες για το *ποια* μέρη του κειμένου πρέπει να διαμορφωθούν, αντί για το *πως* πρέπει να διαμορφωθούν. Αυτό επιτρέπει στους συγγραφείς να ασχολούνται μόνο με το ποια μέρη πρέπει να διαμορφωθούν, αποφεύγοντας τη συνεχή μορφοποίηση του κειμένου τους και τις περιττές, επαναλαμβανόμενες (και ενδεχομένως με λάθη) εργασίες διαμόρφωσης λεπτομερειών. Αυτό επιπλέον εξαλείφει την υποχρέωση για προδιαγραφές γραμματοσειρών και διαστάσεων, οι οποίες ενδέχεται να μην ισχύουν για όλους τους χρήστες. Την υποχρέωση εισαγωγής προδιαγραφών αναλαμβάνει η markup γλώσσα, η οποία τελικά καθορίζει το πως θα διαμορφωθεί το κείμενο.

      Τα πρώτα markup συστήματα, όπως τα :wiki:`troff`, :wiki:`TeX` και :wiki:`LaTeX`, περιελάμβαναν κάποιες οδηγίες στοιχειοθεσίας ενώ νεώτερα συστήματα όπως το :wiki:`Scribe <Scribe (markup language)>` και :wiki:`XML`, βασίζονται στη χρήση επώνυμων στοιχείων (components) που καθορίζουν τη μορφοποίηση και διεργασιών για την επεξεργασία αυτών των στοιχείων.

      Ορισμένες markup γλώσσες όπως η πολύ γνωστή :wiki:`HTML`, έχουν προκαθορισμένες μορφές παρουσίασης (semantic) που σημαίνει ότι βασίζονται σε προδιαγραφές που καθορίζουν επακριβώς το πως θα παρουσιάζονται τα δεδομένα σε διάφορα μέσα (έγγραφη εκτύπωση, οθόνη, κινητά τηλέφωνα κ.λπ.). Άλλες γλώσσες όπως η XML επιτρέπουν στο χρήστη, χωρίς όμως να τον υποχρεώνουν, να ορίσει τα δικά του προσαρμοσμένα στοιχεία εγγράφου.

      Υπάρχουν δεκάδες markup γλώσσες προγραμματισμού προσαρμοσμένες σε διάφορες ανάγκες. Μερικές απλές ( lightweight) αλλά και μη τυποποιημένες είναι οι :wiki:`Markdown`, :wiki:`YAML`, :wiki:`ConTeXt` κ.λπ.



    
   Plain Text
      (:wiki:`plain text <Plain text>`, ελλ. *απλό κείμενο*)
     
      Στην επιστήμη των υπολογιστών, ο όρος plain text χρησιμοποιείται για να περιγράψει (με χαλαρό τρόπο) τα δεδομένα. Ένα αρχείο απλού κειμένου (plain text file) είναι ένα αρχείο που περιέχει μόνο δεδομένα, δηλαδή απλά χαρακτήρες που μπορεί να τους διαβάσει ο άνθρωπος. Επιπλέον πληροφορίες όπως η γραφική αναπαράσταση των χαρακτήρων (κάποια μορφή γραμματοσειράς δηλαδή) ή αριθμοί κινητής υποδιαστολής, εικόνες κ.λπ., δεν περιλαμβάνονται στο αρχείο. Μπορεί επίσης να περιλαμβάνεται και ένας περιορισμένος αριθμός χαρακτήρων που ελέγχουν την απλή διάταξη του κειμένου, όπως διαστήματα (spaces), αλλαγές γραμμών (line breaks), στηλοθέτες (tabs) κ.λπ.

      Ο όρος *αρχείο απλού κειμένου* χρησιμοποιείται για να τα διαχωρίσει από τα *αρχεία μορφοποιημένου κειμένου* (rich text ή γενικά :wiki:`formatted text <Formatted text>`) που περιλαμβάνουν και πληροφορίες διαμόρφωσης (είδος και μέγεθος γραμματοσειράς, χρώματα κ.λπ.), από το *δομημένο κείμενο* (:wiki:`structured text <Structured text>`) που περιλαμβάνει πληροφορίες για τη δομή του εγγράφου (παραγράφους, ενότητες κ.λπ.) και από τα  *δυαδικά αρχεία* (:wiki:`binary files <Binary file>`) μέρη των οποίων είναι δυαδικά αντικείμενα (κωδικοποιημένοι ακέραιοι αριθμοί, πραγματικοί αριθμοί, εικόνες κλπ.).

      Στα αρχεία απλού κειμένου οι χαρακτήρες μπορεί να είναι κωδικοποιημένοι σε οποιοδήποτε πρότυπο. Συνήθως όμως εφαρμόζεται κωδικοποίηση βασισμένη σε :wiki:`Unicode` όπως :wiki:`UTF-8` ή UTF-16 κ.λπ. Στους περισσότερους κειμενογράφους απλού κειμένου (plain text editors, δες Wikipedia γενικά για τους :wiki:`editors <Text editor>`) από προεπιλογή η κωδικοποίηση των χαρακτήρων ακολουθεί το πρότυπο UTF-8 αν και αυτό είναι κάτι που μπορεί να αλλαχθεί από τον χρήστη. Η ιδιότητα αυτή των αρχείων απλού κειμένου τα καθιστά ιδανικά για χρήση σε οποιοδήποτε λειτουργικό σύστημα ενώ, επιπλέον, επειδή δεν περιέχουν καμία άλλη πληροφορία πέρα από τους χαρακτήρες, τα καθιστά τα πλέον ασφαλή ηλεκτρονικά αρχεία.

      Στην πλέον γενική περίπτωση κάποιος θα συναντήσει τέτοια αρχεία με την κατάληξη ``.txt``, αντίστοιχα αρχεία της LaTeX, με την κατάληξη ``.tex``, της γλώσσας Markdown με την κατάληξη ``.md`` κ.λπ. Όλα αυτά τα αρχεία είναι plain text files και μπορούν να αναγνωσθούν και επεξεργαστούν με οποιονδήποτε επεξεργαστή απλού κειμένου. Οι καταλήξεις είναι απλά προσδιοριστές της εφαρμογής ή του πλαισίου με το οποίο δημιουργήθηκαν ή στο οποίο απαευθύνιονται. Θα μπορούσαν να μην έχουν κανκάποια κατάληξη, και πάλι είναι plain text files. Γενικότερα, δεν υπάρχει κάποια καθολική τυποποίηση για τη μορφή τους και επίσης δεν καλύπτονται από συγκεκριμένες άδειες χρήσης (είναι ελέυθερα).


   Tutorial
      (:wiki:`Tutorial`, ελλ. *Εκπαιδευτικό Υλικό* ή *Μάθημα* ή *Διδασκαλία*)
        
      Ένα tutorial είναι κατάλληλο υλικό που σκοπό έχει να μεταδώσει γνώσεις για κάποιο αντικείμενο/πεδίο/τομέα, με περισσότερο διαδραστικό τρόπο από ότι ένα βιβλίο (book) ή μία διάλεξη (lecture). Συνήθως ένα tutorial περιλαμβάνει παραδείγματα ή/και πληροφορίες, για να υλοποιηθεί κάποια συγκεκριμένη εργασία/σκοπός. Είναι προσανατολισμένο στην αρχική μετάδοση γνώσεων (learning-oriented).

      Ένα tutorial δεν επεκτείνεται σε πολλές τεχνικές λεπτομέρειες πάνω στο γνωστικό πεδίο του αντικειμένου του. Είναι περισσότερο μία σειρά απλών και κατανοητών βημάτων που καθοδηγούν κάποιον μη ειδικό ή αρχάριο στο να κατανοήσει κάτι. Για παράδειγμα ένα tutorial με τίτλο "Εισαγωή στην Python" ή "Η Γλώσσα Προγραμματισμού Python", έχει σκοπό να μεταφέρει σε έναν αρχάριο τις βασικές (εγκυκλοπαιδικές) γνώσεις για να κατανοήσει και να χρησιμοποιήσει (ως έναν βαθμό) τη συγκεκριμένη γλώσσα. Όχι όμως πως να κάνει προγραμματισμό. Αντίθετα ένα βιβλίο με αντίστοιχο τίτλο μπορεί να επεκταθεί αυθαίρετα και σε οποιονδήποτε βαθμό σε αντίστοιχα θέματα. Αντίστοιχα ένας *Οδηγός Εκμάθησης* (:term:`How to Guide`) ή ένας *Οδηγός Χρήστη* (:term:`User Guide`) μπορούν να επεκταθούν σε ακόμη πιο εξειδικευμένα θέματα. Μπορείτε να δείτε πως μοιάζουν οι επίσημοι ":pywiki:`Beginners's Guide to Python <BeginnersGuide>`" και ":pyorg:`The Python Tutorial <tutorial>`" της τελευταίας έκδοσης της Python (v.3.8). Φυσικά ένα tutorial μπορεί να έχει έντυπη ή ψηφιακή μορφή (ηλεκτρονικά έγγραφα, video, ιστοσελίδες κ.λπ.).



   How to Guide
      (ελλ. *Οδηγός Εκμάθησης*, δες Wikipedia: ":wiki:`How-to`")
     
      Ανεπίσημος και συνήθως σύντομος οδηγός ή εκπαιδευτικό υλικό, που περιγράφει με σαφή τρόπο πως να αντιμετωπισθεί μία συγκεκριμένη κατάσταση/θέμα/αντικείμενο/εργασία.



   User Guide
      .. todo:: <να το συμπληρώσω>



   Wrapper
      .. todo:: <να το συμπληρώσω>



   URI
      (ολογράφως, :wiki:`Uniform Resource Identifier <Uniform_Resource_Identifier>`, ελλ. *Ενιαίος Προσδιοριστής Πόρων*).
     
      Είναι ένα string χαρακτήρων που προσδιορίζει με μοναδικό τρόπο και σαφήνεια ένα συγκεκριμένο πόρο (resource). Ο όρος "πόρος" αναφέρεται σε οποιασδήποτε μορφής περιεχόμενο είναι προσβάσιμο είτε σε ένα δίκτυο είτε σε τοπικό επίπεδο (προσωπικό υπολογιστή), αρκεί να υπάρχει δυνατότητα πρόσβασης σε αυτόν. Η πιο γνωστή μορφή URI είναι το URL (:wiki:`Uniform Resource Locator <URL>`) που πολλές φορές αναφέρουμε σαν *web address*. Σε τοπικό επίπεδο το URI είναι η θέση που βρίσκεται ο πόρος (path).

      Προκειμένου να υπάρχει ομοιομορφία, όλα τα URI έχουν προκαθορισμένους κανόνες σύνταξης. Συγκεκριμένα κάθε URI αποτελείται από πέντε δομικά στοιχεία και έχει τη γενική μορφή::

        scheme:[//authority]path[?query][#fragment]

      όπου:

      ``scheme:``
         είναι το σχήμα που καθορίζει το πρωτόκολλο επικοινωνίας δηλαδή τους κανόνες που πρέπει να ακολουθούν δύο οντότητες που βρίσκονται σε διαφορετικά συστήματα, για να μπορούν να επικοινωνούν. Παραδείγματα τέτοιων schemes είναι τα: ``http:``, ``https:``, ``ftp:``, ``mailto:``, ``file:``, ``file:``, ``data:`` (παρατηρήστε ότι η άνω-κάτω τελεία είναι μέρος του scheme). Το ``scheme`` είναι υποχρεωτικό πεδίο.
      
      ``//authority``
         είναι οντότητα που, αν υπάρχει, αναλαμβάνει να δρομολογήσει τη διεύθυνση που ακολουθεί. Παρατηρήστε ότι τα δύο slashes ``//`` είναι μέρος του συγκεκριμένου πεδίου. Το ``authority`` είναι προαιρετικό πεδίο.
      
      ``path``
         είναι η ακριβής διαδρομή στην οποία εντοπίζεται ο πόρος.  Αν μέχρι το σημείο που βρίσκεται ο πόρος παρεμβάλλονται ενδιάμεσα επίπεδα αρχειοθέτησης (φάκελοι), αυτά πρέπει να περιλαμβάνονται στο path και να διαχωρίζονται μεταξύ τους με slashes. Το συγκεκριμένο πεδίο είναι υποχρεωτικό.
      
      ``?query``
         προαιρετικό στοιχείο ερωτήματος. Πριν από αυτό ακολουθεί πάντα αγγλικό ερωτηματικό ``?``. Το συγκεκριμένο πεδίο το συναντάμε πάντα όταν κάνουμε search στο διαδίκτυο (π.χ. google).
      
      ``#fragment``
         προαιρετικό στοιχείο που υποδηλώνει έναν δευτερεύοντα πόρο μέσα στον πόρο-στόχο. Αν για παράδειγμα ο πόρος που ψάχνουμε είναι ένα HTML αρχείο, ένα fragment αυτού μπορεί να είναι κάποια επικεφαλίδα ή άλλο στοιχείο (π.χ. ένας πίνακας). Το ``#fragment`` είναι η *ταυτότητα* (id) αυτού του στοιχείου. Πριν από το συγκεκριμένο πεδίο προηγείται πάντα το σύμβολο ``#``.



.. [#] Οι special characters ονομάζονται και `metacharacters <https://en.wikipedia.org/wiki/Metacharacter>`_ (μετα-χαρακτήρες).




