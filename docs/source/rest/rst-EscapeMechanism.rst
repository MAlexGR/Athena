.. ##################### "Μηχανισμός Διαφυγής" ###############################

.. _rest-concept-escape-ref:

Μηχανισμός Διαφυγής (Escaping Mechanism)
==========================================


Το πληκτρολόγιό μας φιλοξενεί εκτός από τους αλφαρηθμητικούς χαρακτήρες (ανάλογα με τη χρησιμοποιούμενη γλώσσα) και ένα σύνολο χαρακτήρων/συμβόλων (ανεξάρτητα από γλώσσα). Μιλάμε φυσικά για τους χαρακτήρες: ``! @ # $ % ^ & * ( ) { } [ ] - _ = + `` κ.λπ. Όλα αυτά τα σύμβολα είναι διαθέσιμα σε εμάς για να αποτυπώνουμε στο κείμενο που θέλουμε (είτε απλό κείμενο είτε κώδικα, δεν έχει σημασία) αλλά ταυτόχρονα έχουν ειδική σημασία και για το πρόγραμμα που θα τα επεξεργαστεί. Στην πραγματικότητα, όλα ανεξαιρέτως τα συστήματα επεξεργασίας (από λειτουργικά συστήματα και γλώσσες προγραμματισμού έως επεξεργαστές κειμένου και εφαρμογές, όλα!) χρησιμοποιούν με ειδικό τρόπο όλα ή κάποια από αυτά τα σύμβολα για εσωτερικές τους διεργασίες. Με άλλα λόγια τα σύμβολα αυτά δεν προορίζονται μόνο για εμάς (επειδή απλά βρίσκονται στο πληκτρολόγιό μας) αλλά και για τα συστήματα πληροφορικής.

Επειδή το σύνολο των διαθέσιμων χαρακτήρων (στο πληκτρολόγιό) είναι πεπερασμένο και όλοι πρέπει να είναι διαθέσιμοι τόσο στον απλό χρήστη όσο και στον προγραμματιστή, οι χαρακτήρες "δεσμεύονται" δηλαδή αποκτούν ειδική σημασία, ανάλογα με το πλαίσιο που τους χρησιμοποιούμε. Για παράδειγμα, στην Python ο χαρακτήρας ``#`` σημαίνει ό,τι ότι ακολουθεί είναι σχόλιο και δε λαμβάνεται υπόψη στην επεξεργασία, στη reST το σύμβολο ``*`` χρησημοποιείται για τη μορφοποίηση κειμένου (το ``*italics*`` μορφοποιείται σαν *italics*) κ.λπ. Τονίζεται όμως ότι δε δεσμεύουν όλα τα συστήματα, όλους τους ειδικούς χαρακτήρες. Θα πρέπει να ανατρέξετε στην τεκμηρίωση του κάθε συστήματος για να βρείτε αυτή τη λεπτομέρεια.

Η δέσμευση όμως κάποιου χαρακτήρα εισάγει και την ανάγκη αυτός να "αποδεσμεύεται" όταν υπάρχει συγκεκριμένος λόγος. Πρέπει δηλαδή να υπάρχει ένας μηχανισμός που να παρακάμπτει την προεπιλεγμένη έννοια των χρησιμοποιούμενων χαρακτήρων. Ο μηχανισμός αυτός λέγεται "μηχανισμός διαφυγής" (escape mechanism). Ο συνήθης τρόπος αποδέσμευσης είναι η χρήση ενός άλλου χαρακτήρα (ή γενικότερα ενός string) αμέσως πριν τον χαρακτήρα που μας ενδιαφέρει. Ο χαρακτήρας (ή το string) που χρησιμοποιείται για τη διαφυγή, λέγεται "χαρακτήρας διαφυγής" (escape charcter). Στις περισσότερες γλώσσες προγραμματισμού αλλά και στα λειτουργικά συστήματα, ο χαρακτήρας διαφυγής είναι το "backslash" ``\`` αν και, επαναλαμβάνουμε, αυτό είναι καθαρά θέμα του πλαισίου (context) στο οποίο αναφερόμαστε, ανατρέξτε στην αντίστοιχη τεκμηρίωση για διευκρινήσεις.

Η reST έχει πιο απλή σχεδίαση στο συγκεκριμένο θέμα γιατί δε διαθέτει κάποιο υποσύστημα αναγνώρισης χαρακτήρων (σαν οντότητες). Ότι γράφουμε στον editor, ερμηνεύεται σαν ένα σύνολο απλών χαρακτήρων πληκτρολογίου (με UTF-8 κωδικοποίηση). Αυτό με απλά λόγια σημαίνει ότι μπορούμε στο κείμενο να χρησιμοποιήσουμε παράλληλα, χαρακτήρες/σύμβολα και σαν χαρακτήρες διαμόρφωσης αλλά και σαν ανεξάρτητους χαρακτήρες. Για παράδειγμα, η *πρόταση* αυτή * γράφτηκε ως εξής: ``η *πρόταση* αυτή * γράφτηκε ως εξής`` (παρατηρήστε τη χρήσησ των ``*``). Παρόλα αυτά και η reST χρησμοποιεί μηχανισμό διαφυγής και συγκεκριμένα το backslash σαν χαρακτήρα διαφυγής.

Στη reST, κάθε χαρακτήρας μετά το χαρακτήρα ``\``, αποδεσμεύεται (εκτός από, σε ορισμένες περιπτώσεις, τον κενό χαρακτήρα). Ο αποδεσμευμένος χαρακτήρας πλέον αντιπροσωπεύει τον εαυτό του και δεν ερμηνεύεται με ειδικό τρόπο. Το ίδιο το ``\`` δεν εμφανίζεται στην έξοδο. Αν θέλουμε να αποδεσμεύσουμε το ίδιο το backslash, χρησιμοποιούμε δύο συνεχόμενα ``\\`` (το πρώτο αποδεσμεύει το δεύτερο).

Ο μηχανισμός διαφυγής με το backslash δε λειτουργεί σε δύο μόνο περιπτώσεις, όταν χρησιμοποιούμε το ``\`` σε "κυριολεκτικό" κείμενο (literal text) σε μπλοκ (literal block) είτε εντός γραμμής (inline literal). Σε τέτοιες περιπτώσεις το κείμενο που γράφουμε δεν υπόκειται σε καμία markup επεξεργασία και παρουσιάζεται ακριβώς όπως γράφεται (το ``\`` θα παραμείνει ως έχει).