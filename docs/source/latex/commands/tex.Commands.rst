.. highlight:: latex

.. _ch:AboutCommands:

************************
Εντολές
************************



Σε αυτό το κεφάλαιο θα περιγράψουμε θέματα σχετικά με τις 'εντολές' της |latex|. Βάλαμε τη λέξη εντολές μέσα σε εισαγωγικά γιατί στη |latex|, αυτό που στις άλλες γλώσσες προγραμματισμού ονομάζεται 'εντολή', εδώ περιγράφεται από τον πιο γενικό όρο 'αλληλουχία ελέγχου' (:term:`control sequence <Control Sequence>`). Όπως θα δούμε και στη συνέχεια, ο συγκεκριμένος όρος περιλαμβάνει τις διάφορες μορφές εντολών που υπάρχουν στη |latex| (και είναι αρκετές).

Στο κεφάλαιο επίσης περιγράφουμε και τις έννοιες:

- Της *ομαδοποίησης* (:ref:`grouping <sec:Grouping>`).
- Των *ορισμάτων* των εντολών (:ref:`arguments <sec:Arguments>`).
- Της *εντολής - δήλωσης* (:ref:`declaration <sec:Declarations>`).
- Του *περιβάλλοντος* (:ref:`environment <sec:Environments>`) 

Όλες αυτές είναι έννοιες θεμελιώδεις για την κατανόηση του τρόπου λειτουργίας των εντολών αλλά και του τρόπου χρήσης τους.

Το κεφάλαιο αναπτύσσεται στις παρακάτω ενότητες.

.. only:: html

   .. contents:: Περιεχόμενα
      :local:
          

.. raw:: latex
   
   \mtcsetrules{minitoc}{off}
   \minitoc


.. _sec:ControlSequences:

Control Sequences
====================

Ο όρος *αλληλουχίες ελέγχου* είναι ίσως χαρακτηριστικός μόνο στον κόσμο των |tex| / |latex| και δηλώνει αυτό που στις άλλες γλώσσες προγραμματισμού αναφέρεται ως *commands* (εντολές). Γιατί αυτός ο γενικός όρος; Γιατί στα |tex| / |latex| οι εντολές έχουν όχι μία αλλά διάφορες μορφές αλλά επίσης και για ιστορικούς [#]_ λόγους.

Για να μην μακρυγορούμε, ο όρος *control sequence* (αλληλουχία ελέγχου) αναφέρεται :

.. index:: \, @, starred commands

- Στο χαρακτήρα :term:`\\` (backslash) ακολουθούμενο από συνδυασμούς γραμμάτων. Αυτά λέγονται *λέξεις ελέγχου* (:ref:`control words <sec:ControlWord>`).
- Στο χαρακτήρα :term:`\\` (backslash) ακολουθούμενο από ένα χαρακτήρα/σύμβολο. Αυτά λέγονται *σύμβολα ελέγχου* (:ref:`control symbols <sec:ControlSymbol>`).
- Σε κάτι από τα παραπάνω συνοδευόμενο από το σύμβολο ( * ) (αστερίσκο). Αυτά είναι οι λεγόμενες *μορφές με αστέρι* (:ref:`starred <sec:StarredCommands>` versions) των παραπάνω sequences.
- Σε απλές αλλά συγκεκριμένες *αλληλουχίες χαρακτήρων* (:ref:`character sequences <sec:CharacterSequence>`) που συμπεριφέρονται σαν εντολές.
- Σε κάτι από τα παραπάνω συνοδευόμενο από το σύμβολο ( :term:`@` ) (at symbol). Αυτά είναι οι λεγόμενες *εσωτερικές εντολές* (:ref:`internal commands <sec:InternalCommands>`).

Μην παρασυρθείτε από την παραπάνω ορολογία, όλα είναι απλά 'εντολές' σε διάφορες μορφές. Στο :numref:`appx:CommandGlossary` φαίνονται όλες οι εντολές που περιγράφουμε στο βιβλίο και πολλές περισσότερες. Η λίστα δυστυχώς δεν είναι πλήρης γιατί ... δεν μπορεί να είναι πλήρης. Υπάρχουν χιλιάδες εντολές που υποστηρίζονται εγγενώς από τα |tex| / |latex| και πολλές περισσότερες που εισάγονται από βοηθητικά πακέτα. Δίνουμε όμως πληροφορίες για το πως να τις διερευνήσετε.





.. _sec:ControlWord:

Control Word
-----------------

Μία εντολή μπορεί να έχει τη μορφή *λέξης ελέγχου* (control word). Αυτό σημαίνει το χαρακτήρα :term:`\\` (backslash) ακολουθούμενο από μία σειρά *γραμμάτων* (string of letters). Τα γράμματα είναι το όνομα της εντολής. Συνήθως το όνομα είναι περιγραφικό ή δηλωτικό της εντολής (π.χ. :term:`\\mbox <mbox>` που σημαίνει 'make box'). Τονίζεται ότι στο όνομα δεν μπορεί να περιέχονται μη-αλφαβητικοί χαρακτήρες, κενά, σύμβολα και αριθμοί, μόνο γράμματα.

Αυτές οι εντολές είναι οι πλέον συνηθισμένες στη |latex|. Η γενική μορφή εισαγωγής τους είναι:

.. code-block:: latex
    
    \<AlphaString>[<OptionalArguments>]{<MandatoryArgument>}


όπου:

.. describe:: AlphaString

Είναι ο όνομα της εντολής με μόνο αλφαβητικούς χαρακτήρες.

.. describe:: OptionalArguments

Είναι πιθανά προαιρετικά ορίσματα.

.. describe:: MandatoryArgument

Είναι το πιθανό υποχρεωτικό όρισμα.

Θα δούμε περισσότερες λεπτομέρειες για τα ορίσματα στην :numref:`sec:Arguments` ':ref:`sec:Arguments`', στη συνέχεια.


.. admonition:: Πως λειτουργεί...

   Όταν η |latex| συναντήσει το χαρακτήρα ``\``, θεωρεί ότι το ή τα γράμματα που ακολουθούν είναι το όνομα της εντολής. Για τη |latex| το όνομα της εντολής τελειώνει όταν συναντήσει αριθμό, κενό ή μη-γράμμα. Σε εκείνο το σημείο ξεκινάει να αξιολογεί [#]_ την εντολή.

Μερικές παρατηρήσεις που πρέπει να έχετε υπόψη, σχετικά με τα ονόματα των control words, είναι τα εξής:

- Η |latex| κάνει διάκριση σε πεζά-κεφαλαία (case sensitive). Δύο πολύ γνωστές και χρησιμοποιούμενες εντολές της |latex| είναι οι ``\LaTeX`` ``\TeX`` οι οποίες παράγουν τα αντίστοιχα λογότυπα. Παρατηρήστε τους συνδυασμούς πεζών / κεφαλαίων. Αν κάνετε λάθος σε έναν από αυτούς τους χαρακτήρες (αντί πεζού, κεφαλαίο ή αντίθετα) θα σταματήσει η επεξεργασία με λάθος 'undefined control sequence'.

- Δεν πρέπει να υπάρχει κενό μεταξύ του ``\`` και του ονόματος. Αρκετά ονόματα εντολών είναι σύνθεση δύο ή περισσότερων λέξεων, προκειμένου να υποδεικνύουν τι ακριβώς κάνουν (π.χ. η εντολή ``\tableofcontents``). Προσέξτε να μην εισάγετε κενά σε τέτοιες λέξεις ελέγχου γιατί μπορεί να οδηγηθείτε σε μη αναμενόμενα αποτελέσματα. Για παράδειγμα:

  .. code-block:: latex

     \appendixname

     \appendix name

  Οι δύο παραπάνω είναι πραγματικές εντολές της |latex|. Η πρώτη εκτυπώνει το όνομα 'Appendix' (αν έχετε κάνει τοπικές ρυθμίσεις σε ελληνικά θα δείτε 'Παράρτημα'). Η δεύτερη, δημιουργεί ένα 'Appendix' (Παράρτημα) και εκτυπώνει σε αυτό τη λέξη 'name'.  

- Κενά που ακολουθούν αμέσως μετά το όνομα, αγνοούνται. Αν θέλετε να
  υπάρχει κενό, προσθέστε αμέσως μετά το όνομα, ένα κενό όρισμα `{ }`. Παράδειγμα:

  .. centered:: Κώδικας

  .. literalinclude:: ../examples/commands/ComExm_1.tex
     :language: latex
    
  .. centered:: Αποτέλεσμα
    
  .. only:: html
    
     .. figure:: ../examples/commands/1_comm.pdf
        :figwidth: 100%
       
  .. raw:: latex
    
     \begin{tcolorbox}
        \TeX νικός και \TeX{} νικός
     \end{tcolorbox}



.. _sec:StarredCommands:

Starred Commands
--------------------

Αρκετές εντολές έχουν και παραλλαγές που λέγονται *εντολές με αστέρι* (starred commands). Πρόκειται ουσιαστικά για τις ίδιες εντολές, που το όνομά τους όμως συνοδεύεται από το σύμβολο του αστεριού (εννοούμε το σύμβολο του πολλαπλασιασμού, εκτός απροόπτου θα το βρείτε μαζί με το πλήκτρο του αριθμού 8).

Η βασική τους μορφή είνα:

.. code-block:: latex

    \<AlphaString>*[<OptionalArguments>]{<MandatoryArgument>}

Οι starred εντολές δεν είναι νέες εντολές αλλά παραλλαγές των υπαρχουσών. Κάνουν ότι και αυτές με κάποιες διαφοροποιήσεις. Για παράδειγμα η εντολή :term:`\\section{title} <section>` εισάγει μία νέα, αριθμημένη, ενότητα με τίτλο `title` (θα έχει τη μορφή: ``<number.> <title>``. Η εντολή όμως :term:`\\section*{title} <section>` κάνει την ίδια ακριβώς ενέργεια χωρίς όμως αρίθμηση και επιπλέον, η συγκεκριμένη ενότητα δεν καταχωρείται στον πίνακα περιεχομένων.

Starred εκδόσεις μπορεί να συναντήσουμε εκτός από τα control words και σε (:ref:`control symbols <sec:ControlSymbol>`).

Μην σας παραξενεύει το γεγονός της ύπαρξης του αστερίσκου και του κανόνα που αναφέραμε στην προηγούμενη ενότητα, ότι τα control words δεν περιέχουν σύμβολα. Στην πραγματικότητα οι starred εκδόσεις των εντολών είναι και αυτές control words που 'συνοδεύονται' από το σύμβολο του αστερίσκου. Όταν ο compiler του |tex| συναντήσει το συγκεκριμένο σύμβολο μετά από το όνομα της εντολής, κάνει κάποια ενέργεια, αν όχι, κάνει κάποια άλλη.

Δεν υπάρχει κάποιος κανόνας για τον τρόπο λειτουργίας των starred εντολών, ούτε και για το εύρος των αλλαγών που επιφέρουν. θα πρέπει κάποιος να διαβάσει την τεκμηρίωσή τους αν θέλει να τις χρησιμοποιήσει. Τονίζεται ότι δεν έχουν όλες οι εντολές και starred εκδόσεις.

Ξανά: το σύμβολο του πολλαπλασιασμού μπαίνει αμέσως μετά το όνομα της εντολής, χωρίς κενό.




.. _sec:ControlSymbol:

Control Symbol
----------------------

Οι εντολές της μορφής *σύμβολο ελέγχου* (control symbol) είναι ο χαρακτήρας :term:`\\` (backslash) ακολουθούμενος από *έναν* (και μόνο) χαρακτήρα/σύμβολο. Έχουν τη γενική μορφή:

.. code-block:: latex

   \<NonLetter>
   
όπου:

.. describe:: NonLetter

μπορεί να είναι οποισδήποτε χαρακτήρας μη-γράμμα (σύμβολο, σημείο στίξης, κενό).

Για παράδειγμα, η εντολή :term:`\\&` εισάγει το χαρακτήρα `&` (ambersand, είναι :ref:`δεσμευμένος χαρακτήρας <subsec:ReservedCharacters>` και δεν μπορεί να εισαχθεί απλά).

Σε αντίθεση με τις λέξεις ελέγχου, στα σύμβολα ελέγχου το κενό που ακολουθεί δεν αγνοείται.

Ορισμένα control symbols έχουν και starred εκδόσεις. Για παράδειγμα η εντολή ( :term:`\\ \\ <\\\\>` ) που προκαλεί μία αλλαγή γραμμής, δεν εμποδίζει την αλλαγή σελίδας σε αυτή τη γραμμή. Η starred έκδοση όμως το κάνει, η νέα γραμμή που εισάγει η εντολή :term:`\\ \\* <\\\\>`, δεν πρόκειται να εμφανιστεί σε νέα σελίδα.

Στον :numref:`tab:ControlSymbols` (Παράρτημα ':ref:`appx:CommandGlossary`') φαίνονται τα βασικότερα control symbols που χρησιμοποιούμε στη |latex|. Μπορείτε να χρησιμοποιήσετε αυτό τον πίνακα σαν γρήγορη αναφορά. Αν θέλετε να μάθετε περισσότερα, κάθε ένα περιγράφεται στη συνέχεια μετά τον πίνακα (χρησιμοποιήστε τα αντίστοιχα links).



.. _sec:CharacterSequence:

Character Sequences
----------------------

Πέρα από τις παραπάνω μορφές εντολών, σε όλες από τις οποίες είναι παρών ο χαρακτήρας :term:`\\`, υπάρχουν και κάποιοι  συνδυασμοί χαρακτήρων, σχεδιασμένοι να δίνουν ειδικές οδηγίες στον compiler της |latex| για το πως να τους χειριστεί. Μία τέτοια περίπτωση είναι τα λεγόμενα 'λογογράμματα' (:wiki:`ligatures <Orthographic_ligature>`), ειδικά συμπλέγματα γραμμάτων και συμβόλων που, κατά τη μεσαιωνική κυρίως περίοδο και σε λατινικής προέλευσης γλώσσες, σχεδιάζονταν με ειδικό τρόπο.

Στην ελληνική γλώσσα τα λογογράμματα (ή αλλιώς `σύμπλεγμα ή λιγατούρα <https://el.wikipedia.org/wiki/%CE%A3%CF%8D%CE%BC%CF%80%CE%BB%CE%B5%CE%B3%CE%BC%CE%B1_(%CF%84%CF%85%CF%80%CE%BF%CE%B3%CF%81%CE%B1%CF%86%CE%AF%CE%B1)>`_) δεν είναι συνηθισμένα. Χαρακτηριστικό παράδειγμα ελληνικού λογογράμματος είναι ο χαρακτήρας 'στίγμα' (μικρό |stigmas|, κεφαλαίο |stigmac|) που αν και μοιάζει, δεν είναι το τελικό σίγμα. Σήμερα είναι γνωστό σαν 'στ'. Γενικά τα :wiki:`ελληνικά λογογράμματα <Greek_ligatures>` είναι περισσότερο αναπαραστάσεις ελληνικών γραμμάτων της αρχαίας και μεσαιωνικής περιόδου. 

Χαρακτηριστικά παραδείγματα λατινικών λογογραμμάτων είναι οι συνδυασμοί `ffi` και `ffl`. Ακόμη περισσότερο σημαντικά είναι τα λογογράμματα σε ανατολικές κυρίως γλώσσες (κινεζική, ινδική, ιαπωνική κ.λπ.) που είναι περισσότερο συμβολικές.

Δε θα επεκτείνουμε περισσότερο γιατί το θέμα δεν παρουσιάζει ιδιαίτερο ενδιαφέρον για την ελληνική γλώσσα.



.. _sec:InternalCommands:

Internal Commands
--------------------

Είναι ίδιες με τις λέξεις ελέγχου που είδαμε πριν αλλά σε αυτές είναι παρών και ο χαρακτήρας :term:`@`, στο όνομα της εντολής (π.χ. `\\c@section`).

Οι συγκεκριμένες εντολές *πρέπει* να χρησιμοποιούνται μόνο σε αρχεία κλάσεων εγγράφων (.cls) ή πακέτων (.sty) λόγω της ειδικής σημασίας του χαρακτήρα `@` σε αυτά τα αρχεία. Για παράδειγμα, η προηγούμενη εντολή `\\c@section` είναι η εντολή που αναπαριστά, στον πυρήνα της |latex| (core), τον απαριθμητή (counter) των ενοτήτων (από αυτόν προκύπτει η αρίθμηση των ενοτήτων). Σε ένα απλό αρχείο `.tex` όμως, μία τέτοια εντολή θα εκλαμβάνονταν από τον compiler σαν την εντολή `\\c` (παράγει το cedilla accent, ειδικό διακριτικό κάτω από γράμμα σε ορισμένες λατινογενείς γλώσσες), η οποία παίρνει σαν όρισμα το χαρακτήρα `@`, ακολουθούμενο από τη λέξη `section`. Αυτό θα εκτύπωνε κάτι σαν: `@section` (το οποίο δεν έχει νόημα).

Σε γενικές γραμμές, οι εσωτερικές εντολές χρησιμοποιούνται καθαρά για προγραμματισμό. Μην τις χρησιμοποιείτε αν δεν ξέρετε πως. Ακόμη καλύτερα, μην ασχοληθείτε με αυτές αν πρώτα δεν αποκτήσετε μία πολύ καλή εμπειρία στη |latex|, δεν ενδείκνυνται για πειραματισμό!



.. _sec:LengthCommands:

Length Commands
------------------

Είναι ειδικές εντολές που αντιπροσωπεύουν 



.. _sec:Grouping:

Grouping (Scope)
=========================

Σε ορισμένες περιπτώσεις θα χρειαστεί μέρος του κειμένου μας να το διαμορφώσουμε με συγκεκριμένο τρόπο και η διαμόρφωση αυτή να είναι τοπική, δηλαδή να μην επηρεάσει το υπόλοιπο κείμενο. Για παράδειγμα ίσως να θέλουμε να εισάγουμε χρώμα σε μερικές παρα­γράφους ή να περιστρέψουμε μία σελίδα σε landscape για να δεχτεί έναν μεγάλο πίνακα και αμέσως μετά να επανέλθουμε στην κανονική μορφή κ.λ.π. Τέτοιες περιπτώσεις δεν είναι σπάνιες. Η |latex| παρέχει έναν μηχανισμό για να περιορίζουμε το πε­δίο εφαρμογής εντολών, σε όποιο μέρος του κειμένου και σε όποια έκταση θέλουμε. Ο μηχανισμός αυτός ονομάζεται “ομαδοποίηση” (grouping) ή “πεδίο εφαρμογής” (scoping), είναι ενσωματωμένος στον πυρήνα του |tex| και στην πράξη εφαρμόζεται ευρύτατα στον ορισμό
των μακροεντολών της |latex|.

.. index:: {, }, bgroup, egroup

Ομαδοποίηση μπορούμε να εφαρμόσουμε χρησιμοποιώντας βασικά τους χαρακτήρες ( :term:`{` ) για έναρξη και ( :term:`}` ) για λήξη ή τα συνώνυμά τους :term:`\\bgroup <bgroup>` και :term:`\\egroup <egroup>` αντίστοιχα και τοποθετώντας μέσα σε αυτά το περιεχόμενο που θέλουμε να διαμορφώσουμε τοπικά. Τα :term:`{`, :term:`}`, :term:`\\bgroup <bgroup>`, :term:`\\egroup <egroup>` είναι αντίστοιχα εναλλάξιμα μεταξύ τους (μπορείτε να ξεκινήσετε ένα group με `{` και να το τερματίσετε με `\\egroup` και αντίθετα). Όλα αυτά φαίνονται στο επόμενο παράδειγμα.

.. centered:: Κώδικας

.. literalinclude:: ../examples/commands/ComExm_2.tex
   :language: latex
   :linenos:

.. centered:: Αποτέλεσμα

.. only:: html

   .. figure:: ../examples/commands/2_comm.pdf
      :figwidth: 100%
      :height: 100px
   
.. raw:: latex

   \begin{tcolorbox}
      Σύνηθες-κείμενο-για-σύγκριση. \bgroup {\bfseries Μπορείτε να
      ομαδοποιήσετε περιεχόμενο} για να {\color{red} εφαρμόσετε
      τοπικές} ρυθμίσεις {\itshape\color{blue} μόνο σε αυτό}, χωρίς
      να {\ttfamily\slshape\bfseries\textcolor{purple}{επηρεαστεί
      το περιβάλλον κείμενο}}. \egroup Σύνηθες-κείμενο-για-σύγκριση.
    \end{tcolorbox}


Ο παραπάνω κώδικας είναι ένα εκτεταμένο παράδειγμα χρήσης ομαδοποίησης μόνο για λόγους επίδειξης (δε χρειάζεται να συντάσσετε έτσι ο κείμενό σας).Παρατηρήστε τη χρήση των πολλαπλών groups. Το αποτέλεσμα της εφαρμογής μίας εντολής μέσα σε ένα group, παραμένει ενεργό μέχρι το τέλος του συγκεκριμένου group.

Οι εντολές που χρησιμοποιήσαμε στο παράδειγμα είναι εντολές - δηλώσεις, μία μορφή εντολών που θα δούμε στη συνέχεια (:ref:`sec:Declarations`). Χωρίς αυτόν τον τρόπο περιορισμού, τα declarations θα μπορούσαν να επηρεάσουν αυθαίρετα όλο το έγγραφο.



.. _sec:Arguments:

Arguments
========================

Πολλές εντολές συνοδεύονται και από ορίσματα (στη |latex| λέγονται παράμετροι, parameters). Ένα όρισμα είναι μία συγκεκριμένη τιμή που εξειδικεύει τη χρήση της εντολής. Δεν είναι υποχρεωτικό ότι μία εντολή πρέπει υποχρεωτικά να έχει ορίσματα. Μπορεί να έχει ένα, περισσότερα ή κανένα όρισμα, εξαρτάται από την εντολή και τις προδιαγραφές της.


.. _sec:MandatoryArg:

Mandatory Argument
----------------------

Το υποχρεωτικό όρισμα είναι πάντα ένα και γράφεται μέσα σε άγκιστρα (curly braces) ``{ }``, αμέσως μετά το όνομα της εντολής.


.. _sec:OptionalArg:

Optional Arguments
------------------------

Τα προαιρετικά ορίσματα γράφονται πάντα μέσα σε αγκύλες (square brackets) ``[ ]``. Σε αντίθεση με τα υποχρεωτικά, είναι δυνατό η εντολή να δέχεται ταυτόχρονα, περισσότερα από ένα προαιρετικά. Όλα γράφονται μέσα στις αγκύλες διαχωριζόμενα με κόμμα.




.. _sec:MovingArgument:

Κινητό Όρισμα (Moving Argument)
=====================================








.. _FragileCommands:

'Ευάθραυστες' Εντολές
========================







.. _RobustCommands:

'Στιβαρές' Εντολές (Robust Commands)
========================================




.. _ShortLongCommands:

Σύντομες και Εκτεταμένες Εντολές (Short and Long Commands)
=============================================================





.. _sec:Declarations:

Declarations
=============================



.. _sec:Environments:

Environments
====================================














.. only:: html

   .. rubric:: Υποσημειώσεις

.. [#] 'Αξιολογεί' σημαίνει ότι ψάχνει να βρει αν η εντολή είναι ορισμένη σε κάποιο σετ εντολών (στην κλάση του εγγράφου ή στα πακέτα που 'φορτώσαμε'), πως ορίζεται και τι ακριβώς κάνει.

.. [#]  Όταν αρχικά δημιουργήθηκε το |tex| δεν υπήρχε στην τεκμηρίωσή του πουθενά ο όρος *command*. Ο :wiki:`Knouth <Donald_Knuth>` χρησιμοποίησε και τεκμηρίωσε τον όρο *control sequence* για να δηλώσει τις κατασκευές εκείνες που σε άλλες γλώσσες προγραμματισμού λέγονται *commands*. Ο όρος *command* εισήλθε αργότερα με τη δημιουργία της |latex|.